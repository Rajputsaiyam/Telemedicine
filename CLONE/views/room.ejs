<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Chat App</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: Arial, Helvetica, sans-serif;
            height: 100vh;
            display: flex;
        }
        
        .main {
            display: flex;
            flex: 1;
        }
        
        .main__left {
            flex: 0.8;
            display: flex;
            flex-direction: column;
        }
        
        .main__right {
            flex: 0.2;
            display: flex;
            flex-direction: column;
            background-color: #242324;
            border-left: 1px solid #3d3d42;
        }
        
        .main__videos {
            flex-grow: 1;
            background-color: black;
            display: flex;
            justify-content: center;
            align-items: center;
            position: relative;
        }
        
        #video-grid {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            overflow-y: auto;
            height: 100%;
            width: 100%;
        }
        
        video {
            height: 300px;
            width: 400px;
            object-fit: cover;
            padding: 8px;
        }
        
        .main__controls {
            display: flex;
            background-color: #1c1e20;
            color: #d2d2d2;
            padding: 5px;
            justify-content: space-between;
        }
        
        .main__controls_block {
            display: flex;
        }
        
        .main__controls_button {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            padding: 8px 10px;
            min-width: 80px;
            cursor: pointer;
        }
        
        .main__controls_button i {
            font-size: 24px;
        }
        
        .main__controls_button:hover {
            background-color: #343434;
            border-radius: 5px;
        }
        
        .leaveMeeting {
            color: #eb534b;
        }
        
        .main__header {
            color: #f5f5f5;
            text-align: center;
            padding: 20px;
            border-bottom: 2px solid #3d3d42;
        }
        
        .main__chat__window {
            flex-grow: 1;
            overflow-y: auto;
            padding: 20px 20px 0 20px;
        }
        
        .main__message_container {
            padding: 22px 12px;
            display: flex;
        }
        
        .main__message_container input {
            flex-grow: 1;
            background-color: transparent;
            border: none;
            color: #f5f5f5;
            outline: none;
        }
        
        .messages {
            color: white;
            list-style: none;
        }
        
        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
        }
        
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 8px;
        }
        
        .modal-content h3 {
            margin-top: 0;
            margin-bottom: 15px;
        }
        
        .modal-content input {
            width: 100%;
            padding: 10px;
            margin: 10px 0;
            box-sizing: border-box;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .modal-content button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            width: 100%;
        }
        
        .modal-content button:hover {
            background-color: #45a049;
        }
        
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .close:hover {
            color: black;
        }
        
        /* Join Room Form */
        #joinForm {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: 20px;
            border-radius: 8px;
            z-index: 101;
        }
        
        #joinForm input, #joinForm button {
            padding: 10px;
            margin: 5px 0;
            width: 100%;
        }
    </style>
</head>
<body>
    <div id="joinForm">
        <h3>Join Video Chat</h3>
        <input type="text" id="roomIdInput" placeholder="Enter Room ID">
        <button onclick="joinRoom()">Join Room</button>
        <button onclick="createNewRoom()">Create New Room</button>
    </div>

    <div class="main" style="display: none;">
        <div class="main__left">
            <div class="main__videos">
                <div id="video-grid"></div>
            </div>
            <div class="main__controls">
                <div class="main__controls_block">
                    <div class="main__controls_button" id="muteButton" onclick="muteUnmute()">
                        <i class="fa fa-microphone"></i>
                        <span>Mute</span>
                    </div>
                    <div class="main__controls_button" id="playPauseVideo" onclick="playStop()">
                        <i class="fa fa-video-camera"></i>
                        <span>Pause Video</span>
                    </div>
                    <div class="main__controls_button" id="shareButton" onclick="shareRoomLink()">
                        <i class="fa fa-share-alt"></i>
                        <span>Share</span>
                    </div>
                </div>

                <div class="main__controls_block">
                    <div class="main__controls_button">
                        <i class="fa fa-shield"></i>
                        <span>Security</span>
                    </div>
                    <div class="main__controls_button">
                        <i class="fa fa-users"></i>
                        <span>Participants</span>
                    </div>
                    <div class="main__controls_button">
                        <i class="fa fa-comment"></i>
                        <span>Chat</span>
                    </div>
                </div>

                <div class="main__controls_block">
                    <div class="main__controls_button leaveMeeting" id="leave-meeting">
                        <i class="fa fa-times"></i>
                        <span class="">Leave Meeting</span>
                    </div>
                </div>
            </div>
        </div>
        <div class="main__right">
            <div class="main__header">
                <h6>Chat</h6>
            </div>
            <div class="main__chat__window" id="main__chat__window">
                <ul class="messages" id="all_messages"></ul>
            </div>
            <div class="main__message_container">
                <input type="text" id="chat_message" placeholder="Type message here..">
            </div>
        </div>
    </div>
    
    <!-- Share Link Modal -->
    <div id="shareModal" class="modal">
        <div class="modal-content">
            <span class="close" onclick="closeShareModal()">&times;</span>
            <h3>Share this meeting link</h3>
            <input type="text" id="roomLink" readonly>
            <button onclick="copyRoomLink()">Copy Link</button>
        </div>
    </div>
    
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <script src="https://cdn.socket.io/4.5.4/socket.io.min.js"></script>
    <script>
        // Global variables
        let ROOM_ID = '';
        let myPeer;
        let myPeerId;
        let peers = {};
        let myVideoStream;
        const socket = io();
        
        // DOM elements
        const videoGrid = document.getElementById('video-grid');
        const mainContainer = document.querySelector('.main');
        const joinForm = document.getElementById('joinForm');
        
        // Generate a random 6-character room ID
        function generateRoomId() {
            return Math.random().toString(36).substr(2, 6);
        }
        
        // Join an existing room
        function joinRoom() {
            const roomId = document.getElementById('roomIdInput').value.trim();
            if (roomId) {
                ROOM_ID = roomId;
                startVideoChat();
            } else {
                alert('Please enter a room ID');
            }
        }
        
        // Create a new room
        function createNewRoom() {
            ROOM_ID = generateRoomId();
            startVideoChat();
        }
        
        // Start the video chat
        async function startVideoChat() {
            try {
                // Hide join form and show main interface
                joinForm.style.display = 'none';
                mainContainer.style.display = 'flex';
                
                // Get user media
                myVideoStream = await navigator.mediaDevices.getUserMedia({
                    video: true,
                    audio: true
                });
                
                // Create self video element
                const myVideo = document.createElement('video');
                myVideo.muted = true;
                addVideoStream(myVideo, myVideoStream);
                
                // Initialize PeerJS
                myPeer = new Peer();
                
                myPeer.on('open', id => {
                    myPeerId = id;
                    // Connect to signaling server
                    socket.emit('join-room', ROOM_ID, id);
                    
                    // Update URL to include room ID
                    window.history.pushState({}, '', `?room=${ROOM_ID}`);
                    
                    // Show room ID in title
                    document.title = `Video Chat - Room: ${ROOM_ID}`;
                });
                
                // Handle incoming calls
                myPeer.on('call', call => {
                    call.answer(myVideoStream);
                    const video = document.createElement('video');
                    call.on('stream', userVideoStream => {
                        addVideoStream(video, userVideoStream);
                    });
                    call.on('close', () => {
                        video.remove();
                    });
                });
                
                // Notify existing users when new user connects
                socket.on('user-connected', userId => {
                    connectToNewUser(userId, myVideoStream);
                });
                
                // Handle user disconnection
                socket.on('user-disconnected', userId => {
                    if (peers[userId]) {
                        peers[userId].close();
                        delete peers[userId];
                    }
                });
                
            } catch (err) {
                console.error('Error starting video chat:', err);
                alert('Error accessing camera/microphone. Please check permissions.');
                joinForm.style.display = 'block';
                mainContainer.style.display = 'none';
            }
        }
        
        function connectToNewUser(userId, stream) {
            const call = myPeer.call(userId, stream);
            const video = document.createElement('video');
            call.on('stream', userVideoStream => {
                addVideoStream(video, userVideoStream);
            });
            call.on('close', () => {
                video.remove();
            });
            peers[userId] = call;
        }
        
        function addVideoStream(video, stream) {
            video.srcObject = stream;
            video.addEventListener('loadedmetadata', () => {
                video.play();
            });
            videoGrid.appendChild(video);
        }
        
        // Control Functions
        function muteUnmute() {
            const enabled = myVideoStream.getAudioTracks()[0].enabled;
            if (enabled) {
                myVideoStream.getAudioTracks()[0].enabled = false;
                document.getElementById('muteButton').innerHTML = `
                    <i class="fa fa-microphone-slash"></i>
                    <span>Unmute</span>
                `;
            } else {
                myVideoStream.getAudioTracks()[0].enabled = true;
                document.getElementById('muteButton').innerHTML = `
                    <i class="fa fa-microphone"></i>
                    <span>Mute</span>
                `;
            }
        }
        
        function playStop() {
            const enabled = myVideoStream.getVideoTracks()[0].enabled;
            if (enabled) {
                myVideoStream.getVideoTracks()[0].enabled = false;
                document.getElementById('playPauseVideo').innerHTML = `
                    <i class="fa fa-video-camera"></i>
                    <span>Play Video</span>
                `;
            } else {
                myVideoStream.getVideoTracks()[0].enabled = true;
                document.getElementById('playPauseVideo').innerHTML = `
                    <i class="fa fa-video-camera"></i>
                    <span>Pause Video</span>
                `;
            }
        }
        
        // Link Sharing Functions
        function shareRoomLink() {
            const modal = document.getElementById('shareModal');
            const roomLinkInput = document.getElementById('roomLink');
            
            // Construct the full URL to your room
            const roomUrl = `${window.location.origin}${window.location.pathname}?room=${ROOM_ID}`;
            
            roomLinkInput.value = roomUrl;
            modal.style.display = 'block';
        }
        
        function copyRoomLink() {
            const roomLinkInput = document.getElementById('roomLink');
            
            roomLinkInput.select();
            roomLinkInput.setSelectionRange(0, 99999); // For mobile devices
            
            document.execCommand('copy');
            
            // Show a confirmation
            alert('Meeting link copied to clipboard!');
            closeShareModal();
        }
        
        function closeShareModal() {
            const modal = document.getElementById('shareModal');
            modal.style.display = 'none';
        }
        
        // Close modal when clicking outside of it
        window.onclick = function(event) {
            const modal = document.getElementById('shareModal');
            if (event.target == modal) {
                modal.style.display = 'none';
            }
        }
        
        // Leave meeting function
        document.getElementById('leave-meeting').addEventListener('click', () => {
            if (confirm('Are you sure you want to leave the meeting?')) {
                // Close all peer connections
                Object.values(peers).forEach(peer => peer.close());
                
                // Stop local media streams
                if (myVideoStream) {
                    myVideoStream.getTracks().forEach(track => track.stop());
                }
                
                // Notify server we're leaving
                if (myPeerId) {
                    socket.emit('leave-room', ROOM_ID, myPeerId);
                }
                
                // Redirect to home
                window.location.href = window.location.origin;
            }
        });
        
        // Check if room ID is in URL on page load
        window.addEventListener('load', () => {
            const urlParams = new URLSearchParams(window.location.search);
            const roomId = urlParams.get('room');
            
            if (roomId) {
                document.getElementById('roomIdInput').value = roomId;
                joinRoom();
            }
        });
    </script>
</body>
</html>